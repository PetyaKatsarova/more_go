package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
	"github.com/go-chi/chi/v5" // go mod tidy      cmnd to search for the packages
)

func main() {
	fmt.Println("hello world")
	server := &http.Server{
		Addr: ":3000",
		Handler: http.HandlerFunc(basicHandler),
	}

	stop := make(chan os.Signal, 1) // create a buffer ch for receiving os signals: 1
	// ch can hold 1 signal at a time v4 it needs to be emptied
	// SIGINT (interrupt from keyboard, usually generated by Ctrl+C
	//  These signals are used to communicate certain system or terminal events to a 
	// program, like requests to stop execution.
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)

	go func ()  {
		if err := server.ListenAndServe(); err == nil {
			fmt.Println("failed to listen to server", err)
		}	
	}()
	<-stop // block until we receive our signal
	// create deadline to wait for
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	server.Shutdown(ctx) // doesnt block if no connection, but wait till timeout is done
	fmt.Println("shutting down")
}

func basicHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Hello world!"))
}

// go mod tidy                